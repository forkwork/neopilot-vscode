#!/usr/bin/env bash

set -euxo pipefail
source script/lib/blob-store.sh

# Function for displaying help info
help_info() {
  echo "
Usage: ${0##*/} [options]
Build a release .tar.gz for Linux.

Options:
  -h    Display this help and exit.
  "
}

while getopts 'h' flag
do
    case "${flag}" in
        h)
           help_info
           exit 0
           ;;
    esac
done

export NEOPILOT_BUNDLE=true

channel=$(<crates/neopilot/RELEASE_CHANNEL)
target_dir="${CARGO_TARGET_DIR:-target}"

version="$(script/get-crate-version neopilot)"
# Set RELEASE_VERSION so it's compiled into GPUI and it knows about the version.
export RELEASE_VERSION="${version}"

commit=$(git rev-parse HEAD | cut -c 1-7)

version_info=$(rustc --version --verbose)
host_line=$(echo "$version_info" | grep host)
target_triple=${host_line#*: }
musl_triple=${target_triple%-gnu}-musl
remote_server_triple=${REMOTE_SERVER_TARGET:-"${musl_triple}"}
rustup_installed=false
if command -v rustup >/dev/null 2>&1; then
    rustup_installed=true
fi

# Generate the licenses first, so they can be baked into the binaries
script/generate-licenses

if "$rustup_installed"; then
    rustup target add "$remote_server_triple"
fi

export CC=$(which clang)

# Build binary in release mode
export RUSTFLAGS="${RUSTFLAGS:-} -C link-args=-Wl,--disable-new-dtags,-rpath,\$ORIGIN/../lib"
cargo build --release --target "${target_triple}" --package neopilot --package cli
# Build remote_server in separate invocation to prevent feature unification from other crates
# from influencing dynamic libraries required by it.
if [[ "$remote_server_triple" == "$musl_triple" ]]; then
    export RUSTFLAGS="${RUSTFLAGS:-} -C target-feature=+crt-static"
fi
cargo build --release --target "${remote_server_triple}" --package remote_server

# Strip debug symbols and save them for upload to DigitalOcean
objcopy --only-keep-debug "${target_dir}/${target_triple}/release/neopilot" "${target_dir}/${target_triple}/release/neopilot.dbg"
objcopy --only-keep-debug "${target_dir}/${remote_server_triple}/release/remote_server" "${target_dir}/${remote_server_triple}/release/remote_server.dbg"
objcopy --strip-debug "${target_dir}/${target_triple}/release/neopilot"
objcopy --strip-debug "${target_dir}/${target_triple}/release/cli"
objcopy --strip-debug "${target_dir}/${remote_server_triple}/release/remote_server"

gzip -f "${target_dir}/${target_triple}/release/neopilot.dbg"
gzip -f "${target_dir}/${remote_server_triple}/release/remote_server.dbg"

if [[ -n "${DIGITALOCEAN_SPACES_SECRET_KEY:-}" && -n "${DIGITALOCEAN_SPACES_ACCESS_KEY:-}" ]]; then
    upload_to_blob_store_public \
        "neopilot-debug-symbols" \
        "${target_dir}/${target_triple}/release/neopilot.dbg.gz" \
        "$channel/neopilot-$version-${target_triple}.dbg.gz"
    upload_to_blob_store_public \
        "neopilot-debug-symbols" \
        "${target_dir}/${remote_server_triple}/release/remote_server.dbg.gz" \
        "$channel/remote_server-$version-${remote_server_triple}.dbg.gz"
fi

# Ensure that remote_server does not depend on libssl nor libcrypto, as we got rid of these deps.
if ldd "${target_dir}/${remote_server_triple}/release/remote_server" | grep -q 'libcrypto\|libssl'; then
    echo "Error: remote_server still depends on libssl or libcrypto" && exit 1
fi

suffix=""
if [ "$channel" != "stable" ]; then
  suffix="-$channel"
fi

# Move everything that should end up in the final package
# into a temp directory.
temp_dir=$(mktemp -d)
neopilot_dir="${temp_dir}/neopilot$suffix.app"

# Binary
mkdir -p "${neopilot_dir}/bin" "${neopilot_dir}/libexec"
cp "${target_dir}/${target_triple}/release/neopilot" "${neopilot_dir}/libexec/neopilot-editor"
cp "${target_dir}/${target_triple}/release/cli" "${neopilot_dir}/bin/neopilot"

# Libs
find_libs() {
    ldd ${target_dir}/${target_triple}/release/neopilot |\
        cut -d' ' -f3 |\
        grep -v '\<\(libstdc++.so\|libc.so\|libgcc_s.so\|libm.so\|libpthread.so\|libdl.so\|libasound.so\)'
}

mkdir -p "${neopilot_dir}/lib"
rm -rf "${neopilot_dir}/lib/*"
cp $(find_libs) "${neopilot_dir}/lib"

# Icons
mkdir -p "${neopilot_dir}/share/icons/hicolor/512x512/apps"
cp "crates/neopilot/resources/app-icon$suffix.png" "${neopilot_dir}/share/icons/hicolor/512x512/apps/neopilot.png"
mkdir -p "${neopilot_dir}/share/icons/hicolor/1024x1024/apps"
cp "crates/neopilot/resources/app-icon$suffix@2x.png" "${neopilot_dir}/share/icons/hicolor/1024x1024/apps/neopilot.png"

# .desktop
export DO_STARTUP_NOTIFY="true"
export APP_CLI="neopilot"
export APP_ICON="neopilot"
export APP_ARGS="%U"
if [[ "$channel" == "preview" ]]; then
  export APP_NAME="Neopilot Preview"
elif [[ "$channel" == "nightly" ]]; then
  export APP_NAME="Neopilot Nightly"
elif [[ "$channel" == "dev" ]]; then
  export APP_NAME="Neopilot Devel"
else
  export APP_NAME="Neopilot"
fi

mkdir -p "${neopilot_dir}/share/applications"
envsubst < "crates/neopilot/resources/neopilot.desktop.in" > "${neopilot_dir}/share/applications/neopilot$suffix.desktop"

# Copy generated licenses so they'll end up in archive too
cp "assets/licenses.md" "${neopilot_dir}/licenses.md"

# Create archive out of everything that's in the temp directory
arch=$(uname -m)
target="linux-${arch}"
if  [[ "$channel" == "dev" ]]; then
  archive="neopilot-${commit}-${target}.tar.gz"
else
  archive="neopilot-${target}.tar.gz"
fi

rm -rf "${archive}"
remove_match="neopilot(-[a-zA-Z0-9]+)?-linux-$(uname -m)\.tar\.gz"
ls "${target_dir}/release" | grep -E ${remove_match} | xargs -d "\n" -I {} rm -f "${target_dir}/release/{}" || true
tar -czvf "${target_dir}/release/$archive" -C ${temp_dir} "neopilot$suffix.app"

gzip -f --stdout --best "${target_dir}/${remote_server_triple}/release/remote_server" > "${target_dir}/neopilot-remote-server-linux-${arch}.gz"
